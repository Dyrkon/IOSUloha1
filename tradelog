#!/bin/sh

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

COMMANDS=""
LOG_FILES=""
GZ_LOG_FILES="gunzip -c"
# DODELAT PRO GZ
READ_INPUT="cat"
TICKERS=""
A_DATETIME=" "
B_DATETIME="9999-99-99 99:99:99"
WIDTH="0"
SELL=""
BUY=""

# alias t1="/usr/bin/bash ./tradelog -t V -t GOOGL -t UNH -t PG -t FB -t AMZN -t WMT list-tick stock-2.log"
# alias t2="/usr/bin/bash ./tradelog logfile.log stock-2.log"
# alias t3="/usr/bin/bash ./tradelog stock-2.log"

printf_help() {
  echo "Usage: tradelog [-h | --help]"
  echo "       tradelog [FILTR] [PŘÍKAZ] [LOG [LOG2 [...]]"
  printf "\n"

  echo "COMMANDS:"
  echo "list-tick:    Prints list of available tickers"
  echo "profit:       Prints total profit of closed positions"
  echo "pos:          Prints values of currently held positions sorted by the value in descending order"
  echo "last-price:   Prints last known prices for every ticker"
  echo "hist-ord:     Prints histogram of count of number of transactions according to ticker"
  echo "graph-pos:    Prints graph of values held according to ticker"
  printf "\n"

  echo "FILTERS:"
  echo "-a DATETIME:  Filters out entries AFTER specified date (excluding entered date) in format [ YYYY-MM-DD HH:MM:SS ]"
  echo "-b DATETIME:  Filters out entries BEFORE specified date (excluding entered date) in format [ YYYY-MM-DD HH:MM:SS ]"
  echo "-t TICKER:    Filters out entries with MATCHING TICKER. If more TICKERS are specified they all will be filtered out"
  echo "-w WIDTH:     Sets WIDTH for graph to be printed. The specified WIDTH must be the length of longest row. \n
                        More than one WIDTH switches specified or the value of WIDTH being less than zero or float point \n
                        number will result in error"
  printf "\n"

  echo "  HELP"
  echo "-h or --help: Prints short description of every command and switch"
}

list_tick() {
  echo "$TICKERS" | tr -s ', ' '\n'
}

profit() {
  SELL=$(echo "$FILTERED_INPUT" | awk -F ';' '$3 == "sell" { sum += $4 * $6 }  END {printf "%.2f", sum}')
  BUY=$(echo "$FILTERED_INPUT" | awk -F ';' '$3 == "buy" { sum += $4 * $6 } END {printf "%.2f", sum}')
  OUTPUT=$(echo "$SELL - $BUY" | bc)
  echo "$OUTPUT"
}

  #DODELAT |||| Zarovanvani viz zadani
pos()
{
  for TICK in $TICKERS
  do
    SELL_TICK=$(echo "$FILTERED_INPUT" | awk -F ';' -v tick="$TICK" '$3 == "sell" && $2 == tick {sum += $6}  END {print sum}')
    BUY_TICK=$(echo "$FILTERED_INPUT" | awk -F ';' -v tick="$TICK" '$3 == "buy" && $2 == tick {sum += $6}  END {print sum}')
    HOLD=$(echo "$BUY_TICK - $SELL_TICK" | bc)
    PRICE=$(echo "$FILTERED_INPUT" | awk -F ";" -v tick="$TICK" '{ if ($2 == tick) print $4 }'| tail -n1)
    TOTAL=$(echo "$HOLD $PRICE" | awk -v tick="$TICK" '{ printf "%-11s : %.2f", tick, $1*$2}')
    echo "$TOTAL"
  done
}

  #DODELAT |||| Zarovanvani viz zadani
last_price()
{
  for TICK in $TICKERS
  do
    LAST_PRICE=$(echo "$FILTERED_INPUT" | awk -F ";" -v tick="$TICK" '{ if ($2 == tick) print $4 }'| tail -n1)
    PRINT=$(echo "$LAST_PRICE" | awk -v tick="$TICK" '{ printf "%-11s : %.2f", tick, $1}')
    echo "$PRINT"
  done
}

  #DODELAT
hist_ord()
{
  if [ $WIDTH -eq "0" ]
  then

    for TICK in $TICKERS
    do
      TRANSACTIONS=$(echo "$FILTERED_INPUT" | awk -F ";" -v tick="$TICK" '$2 == tick {sum += 1} END {print sum}')
      HASTAGS=""
      while [ 0 != "$TRANSACTIONS" ]
      do
        HASTAGS="$HASTAGS#"
        TRANSACTIONS=$((TRANSACTIONS-1))
      done
      OUTPUT=$(echo "$TRANSACTIONS" | awk -F ";" -v tick="$TICK" -v tags="$HASTAGS" '{ printf "%-11s : %s", tick, tags }')
      echo "$OUTPUT"
    done

  else

    LONGEST=""
    for TICK in $TICKERS
    do
      LENGTH=$(echo "$FILTERED_INPUT" | awk -F ";" -v tick="$TICK" '$2 == tick {sum += 1} END {print sum}')
      LONGEST=$(echo "" | awk -v len="$LENGTH" -v longest="$LONGEST"  'longest < length { print length }' )
    done

    echo "longest - $LONGEST"

    DEVIDER=$(echo ""| awk -v longest="$LONGEST" -v width="$WIDTH" '{ print longest/width }' )

    echo "div - $DEVIDER"

    for TICK in $TICKERS
    do
      TRANSACTIONS=$(echo "$FILTERED_INPUT" | awk -F ";" -v tick="$TICK" -v div="$DEVIDER" '$2 == tick {sum += 1} END {print sum/div}'| tail -n1)
      HASTAGS=""
      while [ 0 != "$TRANSACTIONS" ]
      do
        HASTAGS="$HASTAGS#"
        TRANSACTIONS=$((TRANSACTIONS-1))
      done
      OUTPUT=$(echo "$TRANSACTIONS" | awk -F ";" -v tick="$TICK" -v tags="$HASTAGS" '{ printf "%-11s : %s", tick, tags }')
      echo "$OUTPUT"
    done

  fi
}

graph_pos()
{
  echo "TODO"
}


while [ "$#" -gt 0 ]; do
  case $1 in
  list-tick | pos | profit | last-price | hist-ord | graph-pos)
    COMMANDS="$1 $COMMANDS"
    shift
    ;;
  -h)
    printf_help
    exit 0
    ;;
  -w)
    WIDTH="$2"
    shift
    shift
    ;;
  -a)
    A_DATETIME="$2"
    shift
    shift
    ;;
  -b)
    B_DATETIME="$2"
    shift
    shift
    ;;
  -t)
    TICKERS="$2 $TICKERS"
    shift
    shift
    ;;
  *.gz)
    GZ_LOG_FILES=" $1"
    shift
    ;;
  *.log)
    LOG_FILES="$LOG_FILES $1"
    shift
    ;;
  esac
done

READ_INPUT="cat $LOG_FILES"

if [ "$TICKERS" = "" ]; then
    FILTERED_INPUT=$(eval "$READ_INPUT" | awk -F ";" -v btime="$B_DATETIME" -v atime="$A_DATETIME" '{ if ($1 < btime && $1 > atime) print }')
    TICKERS=$(echo "$FILTERED_INPUT" | sort -t ";" -k2,2 -u | awk -F ";" '{ print $2 }')
  else
    FILTERED_INPUT=$(eval "$READ_INPUT" | awk -F ";" -v tickers="$TICKERS" -v btime="$B_DATETIME" -v atime="$A_DATETIME" '{ if (tickers ~ $2 && $1 < btime && $1 > atime) print }')
  fi

case "$COMMANDS" in
  *hist-ord*)
    hist_ord ;;
  *last-price*)
    last_price ;;
  *list-tick*)
    list_tick ;;
  *profit*)
    profit ;;
  *pos*)
    pos ;;
  esac
